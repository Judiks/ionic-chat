{"version":3,"sources":["webpack:///src/app/chat/components/contacts/components/contact-dashboard/contact-dashboard.component.ts","webpack:///src/app/chat/components/contacts/components/contact-dashboard/contact-dashboard.component.html","webpack:///src/app/chat/components/contacts/contacts-routing.module.ts","webpack:///src/app/chat/components/contacts/contacts.module.ts","webpack:///src/app/chat/components/contacts/components/contact-dashboard/contact-dashboard.component.scss","webpack:///src/app/chat/components/contacts/contacts.component.ts"],"names":["ContactDashboardComponent","keyboard","AppR","router","contactService","authHelper","navController","roomService","roomHelper","contacts","Array","initData","colors","length","getContactsData","event","request","skipCount","userId","getUser","id","ContactGetContactData","subscribe","result","console","log","forEach","x","push","getRandomColor","target","complete","err","options","filter","multiple","desiredFields","hasPhoneNumber","navigator","find","contactsRequest","mapContacts","ContactSaveAllFromNative","contact","contactRequest","contactData","mapContactData","displayName","firstName","name","givenName","lastName","familyName","middleName","honorificPrefix","honorificSuffix","addresses","mapAddresses","images","mapImages","organizations","mapOrganizations","phoneNumbers","mapPhoneNumbers","urls","mapUrls","contactAddresses","address","addressRequest","deviceName","streetAddress","type","contactImages","photos","image","imageRequest","deviceUrl","path","value","isMain","contactOrganizations","organization","organizationRequest","position","title","contactPhoneNumbers","phoneNumber","phoneNumberRequest","number","contactUrls","url","urlRequest","charAt","contactId","RoomGetRoomByContact","response","createRequest","JSON","parse","stringify","RoomCreateFromContact","response2","setRoom","redirectToRoom","selector","template","routes","redirectTo","pathMatch","component","children","ContactsRoutingModule","imports","forChild","exports","ContactsModule","declarations","forRoot","providers","ContactsComponent"],"mappings":"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","file":"components-contacts-contacts-module-es5.js","sourcesContent":["import { ApplicationRef, ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ContactFindOptions } from '@ionic-native/contacts/ngx';\nimport { Keyboard } from '@ionic-native/keyboard/ngx';\nimport { NavController } from '@ionic/angular';\nimport { BaseComponent } from 'src/app/shared/base.component';\nimport { AuthHelper } from 'src/app/shared/helpers/auth.helper';\nimport { RoomHelper } from 'src/app/shared/helpers/room.helper';\nimport {\n  AddressRequest,\n  AddressType,\n  ContactDataAddressesRequest,\n  ContactDataImagesRequest,\n  ContactDataOrganizationsRequest,\n  ContactDataPhoneNumbersRequest,\n  ContactDataRequest,\n  ContactDataUrlsRequest,\n  ContactResponse,\n  CreateRoomFromContactRequest,\n  GetContactDataRequest,\n  GetRoomByContactRequest,\n  ImageRequest,\n  OrganizationRequest,\n  PhoneNumberRequest,\n  RoomResponse,\n  SyncContactRequest,\n  SyncContactResponse,\n  UrlRequest\n} from 'src/swagger/models';\nimport { ContactService, RoomService } from 'src/swagger/services';\n\n@Component({\n  selector: 'app-contact-dashboard',\n  templateUrl: './contact-dashboard.component.html',\n  styleUrls: ['./contact-dashboard.component.scss'],\n})\nexport class ContactDashboardComponent extends BaseComponent implements OnInit {\n\n  public contacts: ContactResponse[];\n\n  constructor(\n    public keyboard: Keyboard, public AppR: ApplicationRef, public router: Router,\n    private contactService: ContactService, private authHelper: AuthHelper,\n    public navController: NavController, private roomService: RoomService,\n    public roomHelper: RoomHelper\n  ) {\n    super(keyboard, AppR, router, navController);\n    this.contacts = new Array<ContactResponse>();\n  }\n\n  ngOnInit() {\n    this.initData();\n  }\n\n  public initData() {\n    this.colors = new Array<string>();\n    if (this.contacts.length === 0) {\n      this.getContactsData(null);\n    }\n\n  }\n\n  public getContactsData(event) {\n    const request = {\n      skipCount: this.contacts.length,\n      userId: this.authHelper.getUser().id\n    } as GetContactDataRequest;\n\n    this.contactService.ContactGetContactData(request).subscribe((result: ContactResponse[]) => {\n      console.log(result);\n      this.contacts = [...this.contacts, ...result];\n      this.contacts.forEach(x => {\n        this.colors.push(this.getRandomColor());\n      });\n      if (event) {\n        event.target.complete();\n      }\n    }, err => {\n      console.log(err);\n    });\n  }\n\n  public syncContacts() {\n    if (this.contacts.length > 0) {\n      return;\n    }\n    const options = {\n      filter: '',\n      multiple: true,\n      desiredFields: [],\n      hasPhoneNumber: true\n    } as ContactFindOptions;\n    (navigator as any).contacts.find(['*'],\n      (contacts) => {\n        console.log(contacts);\n        const contactsRequest = this.mapContacts(contacts);\n        this.contactService.ContactSaveAllFromNative(contactsRequest).subscribe((result: SyncContactResponse[]) => {\n          this.contacts = result;\n        },\n          err => {\n            console.log(err);\n          });\n      },\n      err => console.log(err), options);\n  }\n\n  private mapContacts(contacts): Array<SyncContactRequest> {\n    const contactsRequest = new Array<SyncContactRequest>();\n    if (contacts) {\n      contacts.forEach(contact => {\n        const contactRequest = {\n          userId: this.authHelper.getUser().id,\n          contactData: this.mapContactData(contact),\n        } as SyncContactRequest;\n        contactsRequest.push(contactRequest);\n      });\n    }\n    return contactsRequest;\n  }\n\n  private mapContactData(contact): ContactDataRequest {\n    const contactData = {\n      displayName: contact.displayName,\n      firstName: contact.name.givenName,\n      lastName: contact.name.familyName,\n      middleName: contact.name.middleName,\n      honorificPrefix: contact.name.honorificPrefix,\n      honorificSuffix: contact.name.honorificSuffix,\n      addresses: this.mapAddresses(contact),\n      images: this.mapImages(contact),\n      organizations: this.mapOrganizations(contact),\n      phoneNumbers: this.mapPhoneNumbers(contact),\n      urls: this.mapUrls(contact)\n    } as ContactDataRequest;\n    return contactData;\n  }\n\n  private mapAddresses(contact): ContactDataAddressesRequest[] {\n    const contactAddresses = new Array<ContactDataAddressesRequest>();\n    if (contact.addresses) {\n      contact.addresses.forEach(address => {\n        const addressRequest = {\n          address: {\n            deviceName: address.streetAddress,\n            type: 0 as AddressType\n          } as AddressRequest\n        } as ContactDataAddressesRequest;\n        contactAddresses.push(addressRequest);\n      });\n    }\n    return contactAddresses;\n  }\n\n  private mapImages(contact): ContactDataImagesRequest[] {\n    const contactImages = new Array<ContactDataImagesRequest>();\n    if (contact.photos) {\n      contact.photos.forEach(image => {\n        const imageRequest = {\n          image: {\n            deviceUrl: {\n              path: image.value,\n              type: 3\n            } as UrlRequest,\n            isMain: true,\n            type: 0\n          } as ImageRequest\n        } as ContactDataImagesRequest;\n        contactImages.push(imageRequest);\n      });\n    }\n    return contactImages;\n  }\n\n  private mapOrganizations(contact): ContactDataOrganizationsRequest[] {\n    const contactOrganizations = new Array<ContactDataOrganizationsRequest>();\n    if (contact.organizations) {\n      contact.organizations.forEach(organization => {\n        const organizationRequest = {\n          organization: {\n            name: organization.name,\n            position: organization.title\n          } as OrganizationRequest\n        } as ContactDataOrganizationsRequest;\n        contactOrganizations.push(organizationRequest);\n      });\n    }\n    return contactOrganizations;\n  }\n\n  private mapPhoneNumbers(contact): ContactDataPhoneNumbersRequest[] {\n    const contactPhoneNumbers = new Array<ContactDataPhoneNumbersRequest>();\n    if (contact.phoneNumbers) {\n      contact.phoneNumbers.forEach(phoneNumber => {\n        const phoneNumberRequest = {\n          phoneNumber: {\n            number: phoneNumber.value\n          } as PhoneNumberRequest\n        } as ContactDataPhoneNumbersRequest;\n        contactPhoneNumbers.push(phoneNumberRequest);\n      });\n    }\n    return contactPhoneNumbers;\n  }\n\n  private mapUrls(contact): ContactDataUrlsRequest[] {\n    const contactUrls = new Array<ContactDataUrlsRequest>();\n    if (contact.urls) {\n      contact.urls.forEach(url => {\n        const urlRequest = {\n          url: {\n            path: url.value,\n            type: 0\n          } as UrlRequest\n        } as ContactDataUrlsRequest;\n        contactUrls.push(urlRequest);\n      });\n    }\n    return contactUrls;\n  }\n\n  getPhonetic(contact: ContactResponse): string {\n    let result = '';\n    if (contact.contactData?.firstName) {\n      result += contact.contactData?.firstName.charAt(0);\n    }\n    if (contact.contactData?.lastName) {\n      result += contact.contactData?.lastName.charAt(0);\n    }\n    if (result.length < 2 && contact.contactData?.middleName) {\n      result += contact.contactData?.middleName.charAt(0);\n    }\n    if (result.length < 1 && contact.contactData?.displayName) {\n      result += contact.contactData?.displayName.charAt(0);\n    }\n    return result;\n  }\n\n  joinContactRoom(contact: ContactResponse) {\n    const request = { contactId: contact.id } as GetRoomByContactRequest;\n    this.roomService.RoomGetRoomByContact(request).subscribe((response: RoomResponse) => {\n      const createRequest = JSON.parse(JSON.stringify({ contact })) as CreateRoomFromContactRequest;\n      if (!response) {\n        this.roomService.RoomCreateFromContact(createRequest).subscribe((response2: RoomResponse) => {\n          this.roomHelper.setRoom(response2);\n          this.redirectToRoom();\n        });\n      } else {\n        this.roomHelper.setRoom(response);\n        this.redirectToRoom();\n      }\n    });\n\n  }\n}\n","export default \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-title class=\\\"app-header\\\">Contacts</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n  <div *ngIf='contacts.length == 0' class=\\\"h-100 d-flex\\\">\\n    <div class=\\\"text-center justify-content-center m-auto\\\">\\n      <ion-img class=' m-auto w-75 h-75 not-have-img' src='assets/img/icons-contacts.png'></ion-img>\\n      <ion-label class=\\\"luckiest-guy-font not-have-label\\\">You may not have contacts yet.</ion-label>\\n      <p class='warning-description'>Do you want to sync them from your device?</p>\\n      <ion-button (click)='syncContacts()'>Sync device contact</ion-button>\\n    </div>\\n  </div>\\n  <div *ngIf='contacts.length > 0'>\\n    <div *ngFor=\\\"let contact of contacts; index as i\\\">\\n      <div class=\\\"item-item\\\">\\n        <div class='d-flex'>\\n          <div class='d-flex w-25 item-container-img'>\\n            <ion-img *ngIf='contact.contactData?.images[0]?.image?.deviceUrl.path' class=\\\"w-75 h-75 m-auto item-img\\\"\\n              [src]='sanitizeImage(contact.contactData?.images[0]?.image?.deviceUrl.path)'></ion-img>\\n            <div *ngIf='!contact.contactData?.images[0]?.image?.deviceUrl.path'\\n              class=\\\"w-75 h-75 m-auto item-container-img\\\">\\n              <div class=\\\"d-flex w-100 h-100 item-img\\\" [ngStyle]=\\\"{'background-color': colors[i] }\\\">\\n                <div class='item-phonetic'>\\n                  {{ getPhonetic(contact) }}\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n          <div class='w-75 item-data' (click)='joinContactRoom(contact)'>\\n            <div class='item-name'>\\n              {{ contact.contactData.displayName }}\\n            </div>\\n            <div class='item-last-message'>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <ion-infinite-scroll threshold=\\\"100px\\\" (ionInfinite)=\\\"getContactsData($event)\\\">\\n    <ion-infinite-scroll-content loadingSpinner=\\\"bubbles\\\">\\n    </ion-infinite-scroll-content>\\n  </ion-infinite-scroll>\\n</ion-content>\";","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ContactDashboardComponent } from './components/contact-dashboard/contact-dashboard.component';\r\nimport { ContactsComponent } from './contacts.component';\r\n\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: 'dashboard',\r\n    pathMatch: 'full',\r\n  },\r\n  {\r\n    path: '',\r\n    component: ContactsComponent,\r\n    children: [\r\n      {\r\n        path: 'dashboard',\r\n        component: ContactDashboardComponent\r\n      },\r\n      // {\r\n      //   path: 'new',\r\n      //   component: RoomCreatingComponent\r\n      // },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContactsRoutingModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { ContactDashboardComponent } from './components/contact-dashboard/contact-dashboard.component';\r\nimport { ContactsRoutingModule } from './contacts-routing.module';\r\nimport { ContactsComponent } from './contacts.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContactsComponent,\r\n    ContactDashboardComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    IonicModule.forRoot(),\r\n    ContactsRoutingModule\r\n  ],\r\n  providers: [\r\n  ]\r\n})\r\nexport class ContactsModule { }\r\n","export default \".not-have-label {\\n  color: lightsalmon;\\n}\\n\\n@media (min-width: 500px) {\\n  .not-have-img {\\n    display: none;\\n  }\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY2hhdC9jb21wb25lbnRzL2NvbnRhY3RzL2NvbXBvbmVudHMvY29udGFjdC1kYXNoYm9hcmQvY29udGFjdC1kYXNoYm9hcmQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxrQkFBa0I7QUFDdEI7O0FBRUE7RUFDSTtJQUNJLGFBQWE7RUFDbkI7QUFDRiIsImZpbGUiOiJzcmMvYXBwL2NoYXQvY29tcG9uZW50cy9jb250YWN0cy9jb21wb25lbnRzL2NvbnRhY3QtZGFzaGJvYXJkL2NvbnRhY3QtZGFzaGJvYXJkLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm5vdC1oYXZlLWxhYmVsIHtcclxuICAgIGNvbG9yOiBsaWdodHNhbG1vbjtcclxufVxyXG5cclxuQG1lZGlhKG1pbi13aWR0aDogNTAwcHgpIHsgXHJcbiAgICAubm90LWhhdmUtaW1nIHtcclxuICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgfVxyXG59XHJcblxyXG4iXX0= */\";","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-contacts',\r\n  template: `<ion-router-outlet ></ion-router-outlet>`\r\n})\r\nexport class ContactsComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {}\r\n\r\n}\r\n"]}